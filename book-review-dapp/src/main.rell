module;

struct module_args {
    admin_pubkey: byte_array;
}

entity book {
    key isbn: text;
    mutable title: text;
    author: text;
}

entity book_review {
    index book: book;
    reviewer_name: text;
    review: text;
    rating: integer;
}

struct book_review_struct {
    book: struct<book>;
    reviewer_name: text;
    review: text;
    rating: integer;
}

struct tx_op {
    op_name: text;
    op_args: list<gtv>;
}

struct tx_body {
    tx_rid: byte_array;
    ops: list<tx_op>;
    signers: list<byte_array>;
}

struct tx {
    tx_body;
    signatures: list<byte_array>;
}


operation create_book(isbn: text, title: text, author: text) {
    val adminPubkey = chain_context.args.admin_pubkey;
    require(op_context.is_signer(adminPubkey), "only admin allowed to create books");
    create book (isbn = isbn, title = title, author = author);
}

query get_all_books(){
    return book @* {} (.isbn, .title, .author);
}

operation create_book_review(isbn: text, reviewer_name: text, review: text, rating: integer) {
    val book = require( book @? { .isbn == isbn }, "book with isbn %s not found".format(isbn));
    create book_review(book, reviewer_name, review, rating);
}

query get_book_reviews(isbn: text) {
    require( book @? { .isbn == isbn } , "book with isbn %s not found".format(isbn) );
    return book_review @* { .book.isbn == isbn } (
        @sort_desc .rating,
        book_review_struct(
            book = .book.to_struct(),
            .reviewer_name,
            .review,
            .rating
        )
    );
}

query get_reviews_by_rating(rating: integer) {
    return book_review @* { .rating == rating } (
        .book.to_struct(),
        .reviewer_name,
        .review,
        .rating
    );
}

query get_all_book_reviews() {
    return book_review @* {} (
        .book.to_struct(),
        .reviewer_name,
        .review,
        .rating
    );
}

query get_all_transactions() {
    val txs = transaction @* {} (gtv.from_bytes(.tx_data));
    return list<tx>.from_gtv(txs.to_gtv());
}

operation update_book(isbn: text, title: text) {
    val adminPubkey = chain_context.args.admin_pubkey;
    require(op_context.is_signer(adminPubkey), "only admins can update books");

    update book @ { .isbn == isbn } ( .title = title );
}